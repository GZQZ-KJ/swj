import React, { Component } from 'react';
import { View, StyleSheet, Text, TouchableOpacity, BackHandler } from 'react-native';
import { Echarts } from 'native-echarts';
import PriceShow from '../billboard/index'
import Toast from '../../../utils/api/Toast'
import axios from '../../../utils/api/request'
import { HOME_DATALIST } from '../../../utils/api/pathMap'
import { NavigationContext } from '@react-navigation/native'
import { inject, observer } from 'mobx-react'
@inject('rootStore')
@observer
export default class chart extends Component {
  static contextType = NavigationContext
  constructor(props) {
    super(props);
    this.state = {
      num: 1,
      avaPrice: 0,
      percent: 0,
      active: 'day',
      token: this.props.rootStore.token,
      option1: {
        grid: {
          left: 0,
          right: 0,
          bottom: 0,
        },
        legend: {
          left: 16
        },
        dataZoom: [{
          type: 'inside',
          start: 95,
          end: 100,
          zoomLock: false,
        }],
        tooltip: {
          trigger: 'axis',
          // formatter: function (params) {
          //   var htmlStr = '';
          //   htmlStr += '<div><span style="color:#fff;">' + params[0].name + '</span><br/> ';
          //   for (var i = 0; i < params.length; i++) {
          //       htmlStr += '<span style="width: 8px;height: 8px;display:inline-block;border-radius: 50%;background-color:' + params[i].color + '"></span><span style="color:#fff;">' + params[i].seriesName + ':</span>' +
          //           '<span style="color:#fff;">' + params[i].value + '</span><br/>';
          //   }
          //   htmlStr += '</div>';
          //   return htmlStr;
        // },
        },
        xAxis: { //xè½´
          boundaryGap: false,
          data:[],
          // data: ["13:40:00", "13:42:00", "13:44:00", "13:46:00", "13:48:00", "13:50:00", "13:52:00", "13:54:00", "13:56:00", "13:58:00", "14:00:00", "14:02:00", "14:04:00", "14:06:00", "14:08:00", "14:10:00", "14:12:00", "14:14:00", "14:16:00", "14:18:00", "14:20:00", "14:22:00", "14:24:00", "14:26:00", "14:28:00", "14:30:00", "14:32:00", "14:34:00", "14:36:00", "14:38:00", "14:40:00", "14:42:00", "14:44:00", "14:46:00", "14:48:00", "14:50:00", "14:52:00", "14:54:00", "14:56:00", "14:58:00", "15:00:00", "15:02:00", "15:04:00", "15:06:00", "15:08:00", "15:10:00", "15:12:00", "15:14:00", "15:16:00", "15:18:00", "15:20:00", "15:22:00", "15:24:00", "15:26:00", "15:28:00", "15:30:00", "15:32:00", "15:34:00", "15:36:00", "15:38:00", "15:40:00", "15:42:00", "15:44:00", "15:46:00", "15:48:00", "15:50:00", "15:52:00", "15:54:00", "15:56:00", "15:58:00", "16:00:00", "16:02:00", "16:04:00", "16:06:00", "16:08:00", "16:10:00", "16:12:00", "16:14:00", "16:16:00", "16:18:00", "16:20:00", "16:22:00", "16:24:00", "16:26:00", "16:28:00", "16:30:00", "16:32:00", "16:34:00", "16:36:00", "16:38:00", "16:40:00", "16:42:00", "16:44:00", "16:46:00", "16:48:00", "16:50:00", "16:52:00", "16:54:00", "16:56:00", "16:58:00", "17:00:00", "17:02:00", "17:04:00", "17:06:00", "17:08:00", "17:10:00", "17:12:00", "17:14:00", "17:16:00", "17:18:00", "17:20:00", "17:22:00", "17:24:00", "17:26:00", "17:28:00", "17:30:00", "17:32:00", "17:34:00", "17:36:00", "17:38:00", "17:40:00", "17:42:00", "17:44:00", "17:46:00", "17:48:00", "17:50:00", "17:52:00", "17:54:00", "17:56:00", "17:58:00", "18:00:00", "18:02:00", "18:04:00", "18:06:00", "18:08:00", "18:10:00", "18:12:00", "18:14:00", "18:16:00", "18:18:00", "18:20:00", "18:22:00", "18:24:00", "18:26:00", "18:28:00", "18:30:00", "18:32:00", "18:34:00", "18:36:00", "18:38:00", "18:40:00", "18:42:00", "18:44:00", "18:46:00", "18:48:00", "18:50:00", "18:52:00", "18:54:00", "18:56:00", "18:58:00", "19:00:00", "19:02:00", "19:04:00", "19:06:00", "19:08:00", "19:10:00", "19:12:00", "19:14:00", "19:16:00", "19:18:00", "19:20:00", "19:22:00", "19:24:00", "19:26:00", "19:28:00", "19:30:00", "19:32:00", "19:34:00", "19:36:00", "19:38:00", "19:40:00", "19:42:00", "19:44:00", "19:46:00", "19:48:00", "19:50:00", "19:52:00", "19:54:00", "19:56:00", "19:58:00", "20:00:00", "20:02:00", "20:04:00", "20:06:00", "20:08:00", "20:10:00", "20:12:00", "20:14:00", "20:16:00", "20:18:00", "20:20:00", "20:22:00", "20:24:00", "20:26:00", "20:28:00", "20:30:00", "20:32:00", "20:34:00", "20:36:00", "20:38:00", "20:40:00", "20:42:00", "20:44:00", "20:46:00", "20:48:00", "20:50:00", "20:52:00", "20:54:00", "20:56:00", "20:58:00", "21:00:00", "21:02:00", "21:04:00", "21:06:00", "21:08:00", "21:10:00", "21:12:00", "21:14:00", "21:16:00", "21:18:00", "21:20:00", "21:22:00", "21:24:00", "21:26:00", "21:28:00", "21:30:00", "21:32:00", "21:34:00", "21:36:00", "21:38:00", "21:40:00", "21:42:00", "21:44:00", "21:46:00", "21:48:00", "21:50:00", "21:52:00", "21:54:00", "21:56:00", "21:58:00", "22:00:00", "22:02:00", "22:04:00", "22:06:00", "22:08:00", "22:10:00", "22:12:00", "22:14:00", "22:16:00", "22:18:00", "22:20:00", "22:22:00", "22:24:00", "22:26:00", "22:28:00", "22:30:00", "22:32:00", "22:34:00", "22:36:00", "22:38:00", "22:40:00", "22:42:00", "22:44:00", "22:46:00", "22:48:00", "22:50:00", "22:52:00", "22:54:00", "22:56:00", "22:58:00", "23:00:00", "23:02:00", "23:04:00", "23:06:00", "23:08:00", "23:10:00", "23:12:00", "23:14:00", "23:16:00", "23:18:00", "23:20:00", "23:22:00", "23:24:00", "23:26:00", "23:28:00", "23:30:00", "23:32:00", "23:34:00", "23:36:00", "23:38:00", "23:40:00", "23:42:00", "23:44:00", "23:46:00", "23:48:00", "23:50:00", "23:52:00", "23:54:00", "23:56:00", "23:58:00", "00:00:00", "00:02:00", "00:04:00", "00:06:00", "00:08:00", "00:10:00", "00:12:00", "00:14:00", "00:16:00", "00:18:00", "00:20:00", "00:22:00", "00:24:00", "00:26:00", "00:28:00", "00:30:00", "00:32:00", "00:34:00", "00:36:00", "00:38:00", "00:40:00", "00:42:00", "00:44:00", "00:46:00", "00:48:00", "00:50:00", "00:52:00", "00:54:00", "00:56:00", "00:58:00", "01:00:00", "01:02:00", "01:04:00", "01:06:00", "01:08:00", "01:10:00", "01:12:00", "01:14:00", "01:16:00", "01:18:00", "01:20:00", "01:22:00", "01:24:00", "01:26:00", "01:28:00", "01:30:00", "01:32:00", "01:34:00", "01:36:00", "01:38:00", "01:40:00", "01:42:00", "01:44:00", "01:46:00", "01:48:00", "01:50:00", "01:52:00", "01:54:00", "01:56:00", "01:58:00", "02:00:00", "02:02:00", "02:04:00", "02:06:00", "02:08:00", "02:10:00", "02:12:00", "02:14:00", "02:16:00", "02:18:00", "02:20:00", "02:22:00", "02:24:00", "02:26:00", "02:28:00", "02:30:00", "02:32:00", "02:34:00", "02:36:00", "02:38:00", "02:40:00", "02:42:00", "02:44:00", "02:46:00", "02:48:00", "02:50:00", "02:52:00", "02:54:00", "02:56:00", "02:58:00", "03:00:00", "03:02:00", "03:04:00", "03:06:00", "03:08:00", "03:10:00", "03:12:00", "03:14:00", "03:16:00", "03:18:00", "03:20:00", "03:22:00", "03:24:00", "03:26:00", "03:28:00", "03:30:00", "03:32:00", "03:34:00", "03:36:00", "03:38:00", "03:40:00", "03:42:00", "03:44:00", "03:46:00", "03:48:00", "03:50:00", "03:52:00", "03:54:00", "03:56:00", "03:58:00", "04:00:00", "04:02:00", "04:04:00", "04:06:00", "04:08:00", "04:10:00", "04:12:00", "04:14:00", "04:16:00", "04:18:00", "04:20:00", "04:22:00", "04:24:00", "04:26:00", "04:28:00", "04:30:00", "04:32:00", "04:34:00", "04:36:00", "04:38:00", "04:40:00", "04:42:00", "04:44:00", "04:46:00", "04:48:00", "04:50:00", "04:52:00", "04:54:00", "04:56:00", "04:58:00", "05:00:00", "05:02:00", "05:04:00", "05:06:00", "05:08:00", "05:10:00", "05:12:00", "05:14:00", "05:16:00", "05:18:00", "05:20:00", "05:22:00", "05:24:00", "05:26:00", "05:28:00", "05:30:00", "05:32:00", "05:34:00", "05:36:00", "05:38:00", "05:40:00", "05:42:00", "05:44:00", "05:46:00", "05:48:00", "05:50:00", "05:52:00", "05:54:00", "05:56:00", "05:58:00", "06:00:00", "06:02:00", "06:04:00", "06:06:00", "06:08:00", "06:10:00", "06:12:00", "06:14:00", "06:16:00", "06:18:00", "06:20:00", "06:22:00", "06:24:00", "06:26:00", "06:28:00", "06:30:00", "06:32:00", "06:34:00", "06:36:00", "06:38:00", "06:40:00", "06:42:00", "06:44:00", "06:46:00", "06:48:00", "06:50:00", "06:52:00", "06:54:00", "06:56:00", "06:58:00", "07:00:00", "07:02:00", "07:04:00", "07:06:00", "07:08:00", "07:10:00", "07:12:00", "07:14:00", "07:16:00", "07:18:00", "07:20:00", "07:22:00", "07:24:00", "07:26:00", "07:28:00", "07:30:00", "07:32:00", "07:34:00", "07:36:00", "07:38:00", "07:40:00", "07:42:00", "07:44:00", "07:46:00", "07:48:00", "07:50:00", "07:52:00", "07:54:00", "07:56:00", "07:58:00", "08:00:00", "08:02:00", "08:04:00", "08:06:00", "08:08:00", "08:10:00", "08:12:00", "08:14:00", "08:16:00", "08:18:00", "08:20:00", "08:22:00", "08:24:00", "08:26:00", "08:28:00", "08:30:00", "08:32:00", "08:34:00", "08:36:00", "08:38:00", "08:40:00", "08:42:00", "08:44:00", "08:46:00", "08:48:00", "08:50:00", "08:52:00", "08:54:00", "08:56:00", "08:58:00", "09:00:00", "09:02:00", "09:04:00", "09:06:00", "09:08:00", "09:10:00", "09:12:00", "09:14:00", "09:16:00", "09:18:00", "09:20:00", "09:22:00", "09:24:00", "09:26:00", "09:28:00", "09:30:00", "09:32:00", "09:34:00", "09:36:00", "09:38:00", "09:40:00", "09:42:00", "09:44:00", "09:46:00", "09:48:00", "09:50:00", "09:52:00", "09:54:00", "09:56:00", "09:58:00", "10:00:00", "10:02:00", "10:04:00", "10:06:00", "10:08:00", "10:10:00", "10:12:00", "10:14:00", "10:16:00", "10:18:00", "10:20:00", "10:22:00", "10:24:00", "10:26:00", "10:28:00", "10:30:00", "10:32:00", "10:34:00", "10:36:00", "10:38:00", "10:40:00", "10:42:00", "10:44:00", "10:46:00", "10:48:00", "10:50:00", "10:52:00", "10:54:00", "10:56:00", "10:58:00", "11:00:00", "11:02:00", "11:04:00", "11:06:00", "11:08:00", "11:10:00", "11:12:00", "11:14:00", "11:16:00", "11:18:00", "11:20:00", "11:22:00", "11:24:00", "11:26:00", "11:28:00", "11:30:00", "11:32:00", "11:34:00", "11:36:00", "11:38:00", "11:40:00", "11:42:00", "11:44:00", "11:46:00", "11:48:00", "11:50:00", "11:52:00", "11:54:00", "11:56:00", "11:58:00", "12:00:00", "12:02:00", "12:04:00", "12:06:00", "12:08:00", "12:10:00", "12:12:00", "12:14:00", "12:16:00", "12:18:00", "12:20:00", "12:22:00", "12:24:00", "12:26:00", "12:28:00", "12:30:00", "12:32:00", "12:34:00", "12:36:00", "12:38:00", "12:40:00", "12:42:00", "12:44:00", "12:46:00", "12:48:00", "12:50:00", "12:52:00", "12:54:00", "12:56:00", "12:58:00", "13:00:00", "13:02:00", "13:04:00", "13:06:00", "13:08:00", "13:10:00", "13:12:00", "13:14:00", "13:16:00", "13:18:00", "13:20:00", "13:22:00", "13:24:00", "13:26:00", "13:28:00", "13:30:00", "13:32:00", "13:34:00", "13:36:00", "13:38:00"],//éè¦å¨ææ¹å
          // data:date,
          axisLine: {
            show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
          },
          type: 'category',
          // offset: 9, //åç§»é
          axisTick: {
            show: false, //å»åº¦
            alignWithLabel: true //å»åº¦çº¿åæ ç­¾å¯¹é½
          },
          axisLabel: {
            align: {
              option: 'right'
            },
            color: 'rgba(141, 144, 153, 1)',
            fontSize: 10,
            lineHeight: 14,
          },
        },
        yAxis: [
          {
            type: 'value',
            boundaryGap: [0, '100%'],
            position: 'left',
            max: function (value) {
              return value.max + value.max * 0.008
            },
            min: function (value) {
              return value.min - value.min * 0.005
            },
            axisLine: {
              show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
            },
            axisTick: {
              show: false, //å»åº¦
            },
            splitLine: {
              show: false, //æ¯å¦æ¾ç¤ºåéçº¿
            },
            scale: true,

          },
          {
            type: 'value',
            boundaryGap: [0, '100%'],
            position: 'left',
            max: function (value) {
              return value.max + value.max * 0.008
            },
            min: function (value) {
              return value.min - value.min * 0.005
            },
            axisLine: {
              show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
            },
            axisTick: {
              show: false, //å»åº¦
            },
            splitLine: {
              show: false, //æ¯å¦æ¾ç¤ºåéçº¿
            },
            scale: true,

          },
          {
            type: 'value',
            boundaryGap: [0, '100%'],
            position: 'left',
            max: function (value) {
              return value.max + value.max * 0.008
            },
            min: function (value) {
              return value.min - value.min * 0.005
            },
            axisLine: {
              show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
            },
            axisTick: {
              show: false, //å»åº¦
            },
            splitLine: {
              show: false, //æ¯å¦æ¾ç¤ºåéçº¿
            },
            scale: true,

          },
        ],
        series: [
          {
            name: 'ä»·æ ¼',
            type: 'line',
            smooth: false,    //åæ»
            symbol: 'none',
            data:[],
            // data: [1.70155, 1.1005775, 1.70834769, 1.70322265, 1.6998162, 1.70151602, 1.70321754, 1.69810789, 1.699806, 1.70490542, 1.70149561, 1.7048986, 1.7048986, 1.6997839, 1.70658304, 1.70487646, 1.70146671, 1.70486964, 1.69975503, 1.70825381, 1.70825381, 1.70825381, 1.70312905, 1.7116447, 1.7116447, 1.70650977, 1.70309675, 1.70479985, 1.69968545, 1.70308482, 1.70649099, 1.70649099, 1.70649099, 1.7047845, 1.7047845, 1.70137493, 1.7098818, 1.70817192, 1.7030474, 1.70475045, 1.6996362, 1.70473511, 1.6996209, 1.70132052, 1.70642448, 1.70642448, 1.70130521, 1.70981174, 1.70639212, 1.70468573, 1.70468573, 1.69957167, 1.70467039, 1.70296572, 1.71148055, 1.70976907, 1.7080593, 1.7080593, 1.70635124, 1.70635124, 1.70464489, 1.70294025, 1.70975201, 1.70633251, 1.70121351, 1.70291472, 1.71142929, 1.71142929, 1.706295, 1.70458871, 1.70117953, 1.70458189, 1.70458189, 1.70458189, 1.70287731, 1.70968882, 1.70968882, 1.70797913, 1.70627115, 1.70456488, 1.70286032, 1.70967176, 1.70625242, 1.70625242, 1.70625242, 1.70454617, 1.70113708, 1.70283822, 1.70964957, 1.70964957, 1.70964957, 1.70964957, 1.70793992, 1.70623198, 1.70111328, 1.70961885, 1.70790923, 1.70620132, 1.70449512, 1.70449512, 1.70449512, 1.70279062, 1.70960178, 1.70447297, 1.70106402, 1.70276508, 1.70787338, 1.70616551, 1.70275318, 1.70956419, 1.70956419, 1.7044355, 1.70102663, 1.70612971, 1.70271745, 1.70442017, 1.70101133, 1.70271234, 1.70952319, 1.70952319, 1.70952319, 1.70952319, 1.70610414, 1.70610414, 1.70610414, 1.70610414, 1.70439804, 1.70439804, 1.70098924, 1.70269023, 1.7077983, 1.7043827, 1.70097393, 1.70437588, 1.7026715, 1.71118486, 1.70947368, 1.70434526, 1.69923222, 1.70602915, 1.70261709, 1.70602232, 1.70261028, 1.70771811, 1.70259496, 1.70429755, 1.69918466, 1.70768058, 1.70768058, 1.70255754, 1.70936777, 1.70423967, 1.70253543, 1.70423797, 1.70082949, 1.70933364, 1.70591497, 1.70079723, 1.70419882, 1.70249462, 1.7076021, 1.7058945, 1.7058945, 1.70418861, 1.69907604, 1.70247419, 1.71098656, 1.71098656, 1.7058536, 1.70073604, 1.70413751, 1.6990251, 1.7058212, 1.70240956, 1.71092161, 1.70578885, 1.70067148, 1.70577349, 1.70406772, 1.70236365, 1.70747074, 1.7040558, 1.7040558, 1.70064769, 1.70915093, 1.70744178, 1.7040269, 1.70232287, 1.70742984, 1.70572241, 1.70060524, 1.70570706, 1.70570706, 1.70570706, 1.70400135, 1.70059335, 1.70739572, 1.70739572, 1.70739572, 1.70568832, 1.70057126, 1.70227183, 1.70737865, 1.70737865, 1.70737865, 1.70396389, 1.698852, 1.70394856, 1.70224461, 1.71075583, 1.71075583, 1.70904507, 1.70391793, 1.69880618, 1.7039026, 1.7021987, 1.7056031, 1.70048629, 1.70898872, 1.70557074, 1.70045403, 1.7089563, 1.70553839, 1.70042177, 1.70212219, 1.70722856, 1.70552133, 1.70040477, 1.70210517, 1.70380728, 1.70380728, 1.70210347, 1.70891188, 1.70720297, 1.70720297, 1.70208136, 1.70378344, 1.70378344, 1.70037587, 1.70377662, 1.70377662, 1.70377662, 1.70207284, 1.70377491, 1.69866359, 1.70545824, 1.70204732, 1.70545141, 1.70033506, 1.70543607, 1.70543607, 1.70373063, 1.7020269, 1.70543095, 1.70031466, 1.7054156, 1.70371018, 1.70030276, 1.70540367, 1.70540367, 1.70199286, 1.70539685, 1.70198606, 1.70539003, 1.70539003, 1.70368464, 1.70368464, 1.70198096, 1.70368294, 1.70197926, 1.71048916, 1.70877867, 1.70706989, 1.70365575, 1.69854478, 1.70024332, 1.70364381, 1.70194017, 1.70534405, 1.70534405, 1.70534405, 1.70363871, 1.69852779, 1.70362337, 1.70362337, 1.70362337, 1.70362337, 1.70021612, 1.70701698, 1.70189593, 1.70529972, 1.70359442, 1.70359442, 1.70018723, 1.7035876, 1.70188401, 1.70358589, 1.70358589, 1.7018823, 1.70698795, 1.70357397, 1.70357397, 1.7018704, 1.70867788, 1.70355185, 1.70014475, 1.70354504, 1.70013795, 1.7069385, 1.7069385, 1.70181768, 1.70692313, 1.70180236, 1.70690777, 1.70349395, 1.70008696, 1.70178705, 1.71029599, 1.71029599, 1.7051651, 1.70175477, 1.70856179, 1.70514467, 1.70514467, 1.70002924, 1.70172927, 1.70513273, 1.70513273, 1.70172246, 1.71023107, 1.70510038, 1.70169018, 1.71019863, 1.71019863, 1.70506803, 1.70336296, 1.69825287, 1.70334763, 1.70164428, 1.7101525, 1.70844235, 1.70502547, 1.70502547, 1.69991039, 1.70331021, 1.69820028, 1.69989848, 1.70669807, 1.70499137, 1.6998764, 1.70157628, 1.70497943, 1.69986449, 1.70496408, 1.70325912, 1.69814934, 1.70664009, 1.70152017, 1.70662473, 1.70491811, 1.70321319, 1.70150998, 1.70321149, 1.69980507, 1.70490449, 1.70149468, 1.71000215, 1.70658215, 1.70316899, 1.7082785, 1.70315366, 1.70996627, 1.70483637, 1.7014267, 1.70312813, 1.70823751, 1.7031128, 1.71162836, 1.70991673, 1.70478698, 1.69967262, 1.70137229, 1.70307366, 1.70988595, 1.70646618, 1.70134678, 1.70474947, 1.69963522, 1.70473413, 1.70132466, 1.70472731, 1.70472731, 1.69961313, 1.70471197, 1.70471197, 1.69959783, 1.70299703, 1.70640302, 1.70128381, 1.70298509, 1.71150002, 1.70636552, 1.70465915, 1.69954517, 1.70294426, 1.7046472, 1.7046472, 1.7046472, 1.69953326, 1.70463186, 1.70292723, 1.70973894, 1.70973894, 1.70460972, 1.69949589, 1.70629387, 1.70458758, 1.70458758, 1.70288299, 1.7113974, 1.7113974, 1.70626321, 1.70114442, 1.70624785, 1.70283535, 1.70964669, 1.70451775, 1.6994042, 1.70790122, 1.70448542, 1.70278093, 1.71129483, 1.70958354, 1.70787396, 1.70787396, 1.70275034, 1.70956134, 1.71298046, 1.72154536, 1.73015309, 1.72669278, 1.72669278, 1.72496609, 1.72496609, 1.72324112, 1.71979464, 1.72839361, 1.72839361, 1.72839361, 1.72839361, 1.72666522, 1.72148522, 1.72664968, 1.72146973, 1.72663414, 1.72318087, 1.72318087, 1.72145769, 1.72490061, 1.72145081, 1.72489371, 1.72316882, 1.71799931, 1.72143531, 1.72315675, 1.71971044, 1.72314986, 1.72831931, 1.73696091, 1.73348699, 1.74215442, 1.73867011, 1.73867011, 1.73693144, 1.73693144, 1.73693144, 1.73519451, 1.74213529, 1.74213529, 1.74039315, 1.74039315, 1.74039315, 1.73691236, 1.73343854, 1.73863886, 1.73690022, 1.73516332, 1.73689848, 1.73342468, 1.7420918, 1.73860762, 1.73686901, 1.73686901, 1.73686901, 1.73513214, 1.74207267, 1.73684645, 1.73163591, 1.73683082, 1.73683082, 1.73683082, 1.73683082, 1.73162033, 1.73854681, 1.73680826, 1.73333464, 1.73853464, 1.73505757, 1.74373286, 1.74198913, 1.73850515, 1.73676664, 1.73155634, 1.73675101, 1.73327751, 1.73847734, 1.73326191, 1.73499517, 1.74367015, 1.73843914, 1.7367007, 1.7367007, 1.7314906, 1.73841656, 1.73493973, 1.73667467, 1.73146465, 1.73839051, 1.73839051, 1.73491373, 1.7435883, 1.7435883, 1.74184471, 1.73661918, 1.73314594, 1.73661223, 1.73487562, 1.74008025, 1.74008025, 1.73660009, 1.73486349, 1.74180294, 1.73831933, 1.73310437, 1.73483747, 1.74351166, 1.74002464, 1.73654459, 1.73480805, 1.73827767, 1.73306284, 1.7347959, 1.7365307, 1.7365307, 1.73132111, 1.73997772, 1.73823774, 1.73302303, 1.74168815, 1.73820477, 1.73646657, 1.7347301, 1.73646483, 1.73472837, 1.7364631, 1.73299017, 1.73472316, 1.74166205, 1.73992039, 1.73644055, 1.73123123, 1.73988739, 1.73640762, 1.73640762, 1.73467121, 1.73814055, 1.73640241, 1.73466601, 1.74160467, 1.73986307, 1.73986307, 1.73812321, 1.73290884, 1.73984048, 1.7363608, 1.73462444, 1.73809369, 1.73287941, 1.73981093, 1.7345915, 1.73979527, 1.73457588, 1.73631046, 1.73110153, 1.73975704, 1.73975704, 1.73975704, 1.73453777, 1.74147592, 1.73799297, 1.73451698, 1.73972053, 1.73450137, 1.73797037, 1.73449443, 1.73969791, 1.73795821, 1.73274434, 1.73967532, 1.73967532, 1.73967532, 1.73967532, 1.73793564, 1.73445977, 1.73619423, 1.73619423, 1.73098565, 1.73444762, 1.74138541, 1.73790264, 1.73268893, 1.737887, 1.73267334, 1.73440601, 1.74134363, 1.74134363, 1.7361196, 1.73438348, 1.74132101, 1.74132101, 1.73783837, 1.73262485, 1.73782272, 1.73434707, 1.74301881, 1.74127579, 1.73779324, 1.73605545, 1.73431939, 1.74299099, 1.74299099, 1.741248, 1.741248, 1.741248, 1.741248, 1.73602426, 1.73081619, 1.73600864, 1.73600864, 1.73080061, 1.73253141, 1.73426394, 1.73773247, 1.73773247, 1.73599474, 1.73425875, 1.74293004, 1.74118711, 1.74118711, 1.73770474, 1.73770474, 1.73596704, 1.73423107, 1.73769953, 1.73769953, 1.73248643, 1.73768389, 1.73247084, 1.73420331, 1.74114012, 1.74114012, 1.73939898, 1.73418078, 1.7411175, 1.73763527, 1.73242236, 1.7358872, 1.7358872, 1.7358872, 1.73415131, 1.73588546, 1.73241369, 1.73761093, 1.73761093, 1.73587332, 1.73413745, 1.74280814, 1.73932252, 1.73584387, 1.73237218, 1.7375693, 1.73235659, 1.73928602, 1.73406816, 1.7427385, 1.73751028, 1.73751028, 1.73403526, 1.7409714, 1.73923043, 1.73401274, 1.74094879, 1.74094879, 1.74094879, 1.73920784, 1.73920784, 1.73746863, 1.73225622, 1.73398848, 1.73745646, 1.73745646, 1.73745646, 1.73398155, 1.74265146, 1.74265146, 1.73916616, 1.73394866, 1.73741656, 1.73567914, 1.73567914],
            yAxisIndex: 0
          },
          {
            name: 'æ»äº¤æé',
            type: 'line',
            smooth: true,
            symbol: 'none',
            data:[],
            // data: [93476538, 93570015, 93476445, 93476445, 93289492, 93662650, 93662650, 93662650, 93662650, 93756313, 93662557, 94130870, 93942608, 93754723, 94129742, 94129742, 93847353, 94316590, 94033640, 94127674, 94127674, 93939419, 93657601, 93751259, 93657508, 93470193, 93189782, 93562541, 93281853, 93748262, 94029507, 93747418, 93466176, 93466176, 93372710, 93372710, 93559455, 93278777, 93278777, 93465335, 93371870, 93558614, 93465055, 93838915, 93932754, 93932754, 93932754, 94402418, 94308016, 94119400, 94119400, 94025281, 94495407, 94400912, 94400912, 94400912, 94400912, 94306511, 94117898, 94023780, 93929756, 93835826, 94211169, 93928535, 93928535, 94022464, 94210509, 94022088, 93834044, 93834044, 93740210, 93740210, 93552730, 93459177, 93272259, 93365531, 93178800, 93085621, 92899450, 92899450, 92620752, 92805994, 92527576, 92342521, 92250178, 92157928, 92157928, 92618718, 92711337, 92618626, 92526007, 92433481, 92156181, 92156181, 91879712, 92155351, 92155351, 92063196, 91787006, 91511645, 91511645, 91237110, 91328347, 91328347, 91145690, 91236836, 91601783, 91418579, 91144323, 91417756, 91417756, 91417756, 91234920, 91691095, 91599404, 91782603, 91599038, 91873835, 91873835, 91873835, 91690087, 91506707, 91415200, 91140954, 91140954, 90958672, 90958672, 90958672, 90685796, 90867168, 90958035, 90867077, 90867077, 91230545, 90956853, 90956853, 90683982, 90593298, 90412111, 90773759, 90682985, 90864351, 90864351, 90955215, 90955215, 91228081, 91136853, 91501400, 91409899, 91227079, 91591987, 91317211, 91225894, 91225894, 90952216, 91134120, 91042986, 90769857, 91042167, 90860083, 91132663, 90859265, 90768406, 90496101, 90315109, 90405424, 90495829, 90224342, 90043893, 89773761, 90222630, 90222630, 90312853, 90041914, 90221998, 90041554, 89771429, 90040743, 89770621, 89950162, 89950162, 90130062, 89859672, 89859672, 90039391, 90039391, 89859312, 90128890, 90579534, 90307795, 90127179, 90127179, 89856797, 90126367, 89946114, 90036060, 90396204, 90305808, 90305808, 90034891, 89854821, 90034531, 90484704, 90394219, 90303825, 90032914, 89852848, 90032554, 89852489, 89852489, 90122046, 90031924, 89851860, 89851860, 90031564, 89851501, 90031204, 89761110, 90120154, 90120154, 89849794, 90119343, 90029224, 89849166, 90208563, 90388980, 90117813, 90117813, 90568402, 90749539, 90658789, 90658789, 90840107, 90840107, 90840107, 90749267, 90840016, 90840016, 90658336, 91111628, 91020516, 90838475, 90565960, 90747092, 90474851, 90474851, 90384376, 90745914, 90745914, 91199644, 91108444, 90835119, 90653449, 90744102, 90562614, 90924864, 90924864, 90924864, 91106714, 90833394, 90742561, 90833304, 90560804, 90560804, 90379682, 90289302, 90018434, 89928416, 90108273, 90108273, 90378598, 90288219, 90288219, 90197931, 90107733, 90107733, 90107733, 89837410, 90106922, 90106922, 90106922, 90106922, 89836601, 89836601, 90106111, 90106111, 89925899, 90015825, 90465904, 90194506, 90374895, 90103770, 90103770, 90013666, 90193693, 90103499, 90463913, 90282985, 90192702, 90192702, 90192702, 90102509, 90012406, 90192431, 90192431, 90192431, 90192431, 90012046, 90462106, 90190720, 89920148, 90099988, 90009888, 90279918, 90279918, 90099358, 90189457, 90189457, 90009078, 89919069, 89919069, 90188826, 90188826, 89918260, 89918260, 90367851, 90548587, 90276941, 90006110, 90456141, 90456141, 90275229, 90455779, 90365323, 90094227, 90094227, 90094227, 90094227, 89914039, 89914039, 90093867, 89913679, 90183420, 90093237, 90453610, 90272703, 90453248, 90543701, 90453157, 90272251, 90272251, 90543068, 90543068, 90724154, 90542706, 90542706, 90814334, 90814334, 91086777, 90904603, 90813698, 90541257, 90903422, 90903422, 90994325, 90994325, 91085319, 90994234, 90721251, 90811972, 90721160, 91084045, 90901877, 90810975, 90992597, 91447560, 91173217, 91355563, 91081496, 91081496, 90990415, 91081405, 91081405, 91536812, 91353738, 91079677, 91443996, 91169664, 91625512, 91350635, 91350635, 91259284, 91259284, 91259284, 91076765, 90894611, 91258189, 91623222, 91439976, 91622856, 91989347, 91805368, 91805368, 91805368, 92080784, 92264946, 92264946, 91988151, 91988151, 92356104, 92263748, 92356012, 92356012, 92078944, 91894786, 92262365, 92077840, 91893684, 91801790, 91893592, 91893592, 91893592, 91893592, 92261166, 91984383, 92260336, 92260336, 92168076, 92444580, 92167246, 92075079, 92535454, 92442919, 92165590, 92165590, 92073424, 92441718, 92903927, 93368447, 93741921, 93741921, 93741921, 93648179, 93554531, 93554531, 93554531, 93554531, 93367422, 93087320, 92994233, 92715250, 92437104, 92899290, 92713491, 92991631, 92805648, 92527231, 92434704, 92712008, 92619296, 92897154, 92897154, 92711360, 92804071, 93175287, 92988936, 93174914, 93174914, 93640789, 93640789, 93734430, 93453227, 93172867, 93079694, 92893535, 92707748, 92429625, 92614484, 92336641, 92244304, 91967571, 91691668, 91599976, 91599976, 91599976, 91599976, 91599976, 91783176, 91783176, 91783176, 91599610, 91508010, 91416502, 91416502, 91416502, 91873585, 91873585, 91689838, 91689838, 91598148, 91323354, 91232031, 91140799, 91596503, 91321713, 91139070, 91503626, 91412122, 91686358, 91594672, 91503077, 91320071, 91137431, 91137431, 90864019, 90954883, 90682018, 91135428, 91499970, 91316970, 91134336, 91043202, 91043202, 91134245, 90860842, 91133425, 90951158, 91224011, 91041563, 90859480, 90950339, 90677488, 90496133, 90315141, 90224826, 90495500, 90495500, 90947978, 90947978, 90947978, 90675134, 90856484, 90583915, 90493331, 90764811, 91218635, 91218635, 90944979, 90944979, 91035924, 90853852, 90853852, 91035560, 90762453, 90580928, 90852671, 90852671, 90580113, 90580113, 90398953, 90398953, 90308554, 90760097, 90760097, 90850857, 90578304, 90578304, 90668882, 90668882, 90668882, 90668882, 90759551, 90578032, 90306298, 90215992, 90667072, 90667072, 90485738, 90757195, 90757195, 90575681, 90394530, 90394530, 90756108, 90665352, 90393356, 90664536, 90483207, 90754657, 90754657, 91208430, 91117222, 91299456, 91116857, 91572441, 91480869, 91297907, 91206609, 91662642, 91570979, 91479408, 91936805, 91936805, 92120679, 91936438, 92304184, 92211880, 92027456, 92395566, 92210775, 92118564, 91842208, 91750366, 91658616, 91841933, 91841933, 91841933, 91841933, 92301143, 92301143, 92024240, 92392337, 92115160, 92299390, 92299390, 92114791, 92022676, 91746608, 91746608, 91563115, 91288426, 91014561, 91469634, 91286695, 91377982, 91103848, 91103848, 91012744, 90830719, 91012380, 90739343, 90557864, 90376748, 90376748, 90105618, 89835301, 89925136, 90194911, 90194911, 89924326, 90104175, 90284383, 90284383, 90284383, 90284383, 90103814, 90284022, 90193738, 90103544, 90103544, 90013440, 89743400, 89743400, 90102374, 90012272, 90012272, 90012272, 89922260, 90281949, 90281949, 90011103, 89741070, 89920552, 90010473, 89920463, 90010383, 90100393, 90010293, 90010293, 90010293, 90100303, 89830002, 89830002, 90009662, 89739633, 90008852, 90008852, 89828834, 89918663, 90188419, 90368796, 90278427, 90278427, 90278427, 90278427, 90278427, 90097870, 89917674, 90367262, 90276895, 90186618, 90366991, 90095890, 90005794, 90005794, 89825782, 90095259, 89915068, 89915068, 90184813, 90004443, 89824434, 90093907, 90364189, 90183461, 90003094, 90003094, 90363106, 90182380, 90182380],
            yAxisIndex: 1

          },
          {
            name: 'æäº¤é',
            type: 'line',
            smooth: true,
            symbol: 'none',
            data:[],
            // data: [633019, 780068, 879152, 92101, 255095, 124264, 260251, 4300, 836974, 969561, 148113, 675943, 336052, 695823, 198985, 629096, 489799, 338956, 280427, 645085, 795048, 768946, 247367, 204308, 990024, 860516, 200787, 441500, 811993, 431888, 440659, 218546, 443678, 718530, 170040, 169315, 391726, 349427, 806737, 243729, 213909, 294034, 264367, 516746, 561623, 213383, 582251, 829623, 339925, 194305, 482293, 159087, 998216, 67000, 448606, 375437, 429169, 940192, 997637, 493799, 510318, 704378, 397073, 406525, 338011, 463558, 571428, 208166, 124430, 411416, 389275, 272315, 848376, 637165, 945138, 6846, 722671, 161293, 53832, 801804, 965359, 446578, 267224, 207520, 568078, 392597, 945553, 932911, 746584, 271118, 74459, 806013, 939522, 462313, 495159, 118315, 521276, 617974, 525596, 235294, 970478, 456824, 876351, 101449, 768741, 943459, 207491, 657134, 297573, 451533, 659985, 808947, 707152, 991155, 899989, 968438, 306676, 691281, 928944, 27855, 833096, 771357, 769937, 114713, 782257, 709184, 135624, 81698, 879087, 62759, 929451, 573825, 413751, 114688, 839663, 538778, 750107, 660827, 535718, 261941, 992617, 308510, 817881, 798985, 865676, 805143, 877413, 487340, 362128, 378018, 669118, 693859, 730869, 478167, 905376, 523964, 1047, 183521, 268239, 133339, 321990, 968750, 514098, 138615, 438023, 390582, 479724, 43535, 880147, 633807, 762677, 842107, 29719, 235460, 564116, 477609, 688179, 473674, 183768, 818505, 434775, 810781, 588992, 748720, 445266, 72820, 569243, 182642, 756212, 765996, 331097, 785910, 875800, 700014, 235413, 797270, 910669, 669981, 718204, 478217, 107453, 779648, 607340, 387680, 222581, 617528, 228920, 6691, 39175, 99097, 670695, 238081, 23006, 491850, 203395, 704530, 858331, 587948, 416584, 144611, 488955, 845816, 815572, 219287, 411334, 354925, 220159, 355311, 93059, 120124, 679101, 125595, 28680, 415377, 405690, 552628, 852805, 131446, 497259, 448169, 839454, 536731, 808792, 393633, 96940, 996096, 284563, 236820, 241288, 195450, 950676, 650185, 29372, 910932, 972711, 829047, 875513, 774468, 681686, 900244, 227005, 653018, 458498, 882955, 787652, 352965, 660878, 690482, 80813, 313277, 776990, 8166, 866258, 850064, 825270, 485641, 273512, 616147, 708614, 467467, 274720, 662774, 214367, 660276, 295679, 421473, 876085, 188824, 41724, 743253, 972585, 416051, 772823, 807264, 756370, 963945, 458929, 592933, 768318, 91488, 525365, 733043, 687338, 663032, 467874, 501480, 811825, 998854, 713728, 718290, 292055, 511453, 497390, 605320, 34187, 50283, 196254, 37673, 977523, 351158, 331079, 697721, 244411, 165636, 948563, 152188, 295393, 978882, 634704, 152607, 987955, 493940, 762283, 709832, 121735, 384489, 671282, 138331, 866238, 97220, 746417, 201534, 976302, 71156, 188533, 477451, 540800, 225683, 889632, 802504, 253930, 421280, 870248, 85503, 737648, 136002, 439969, 790268, 634006, 386589, 891427, 779270, 148424, 381865, 207530, 93815, 487423, 431961, 75262, 302542, 248722, 556215, 869310, 703135, 911533, 411138, 741543, 230136, 651669, 641286, 246625, 39443, 901915, 646512, 850282, 71318, 324176, 680681, 967745, 572329, 819511, 290094, 69209, 993834, 513914, 777076, 53525, 758665, 538498, 370572, 219462, 690989, 505897, 956064, 496514, 671779, 249322, 280229, 578463, 562633, 137937, 510427, 899252, 327181, 271883, 134883, 999504, 141527, 40084, 593716, 557727, 743369, 310498, 929129, 942190, 108980, 500867, 60160, 266026, 902762, 662095, 212358, 298195, 130712, 950254, 494561, 980582, 866643, 487214, 166027, 948392, 284312, 376933, 266345, 730476, 421183, 126460, 781220, 883009, 786408, 219273, 762524, 278294, 259685, 20232, 863246, 683885, 554633, 631186, 724041, 590526, 668115, 521035, 300790, 863767, 510728, 121798, 359249, 429737, 937068, 512816, 650357, 760307, 919505, 770210, 729123, 856696, 799317, 623169, 366548, 191443, 870852, 690968, 302396, 202495, 768111, 770796, 673287, 90510, 569744, 319727, 87137, 259489, 336531, 994557, 632379, 31963, 111152, 850270, 827442, 919882, 840569, 630218, 256456, 933043, 897758, 159151, 247488, 465277, 497167, 171539, 355468, 395919, 608969, 952703, 881710, 195600, 266496, 451690, 576934, 478655, 700460, 235472, 409530, 211464, 109088, 973610, 704464, 378613, 54094, 837022, 225284, 955601, 266659, 343013, 117618, 352959, 831706, 793776, 390510, 401942, 160336, 373480, 883940, 407383, 335512, 633609, 467841, 376437, 55017, 160011, 273581, 203500, 118510, 91613, 299390, 416472, 944382, 878374, 135202, 158965, 876166, 556223, 452319, 490694, 113720, 591258, 462339, 426801, 655179, 605807, 671971, 7390, 526023, 337260, 11405, 72297, 955937, 260734, 662838, 45573, 802142, 905057, 4823, 132952, 900832, 24111, 108549, 67122, 137957, 2304, 461826, 294248, 129421, 233198, 617601, 937400, 684886, 932, 572207, 126739, 229118, 769786, 452219, 798119, 632305, 529302, 96073, 867651, 510502, 85247, 191283, 47683, 528196, 821793, 853903, 841523, 252396, 961586, 659416, 725375, 968022, 179955, 941776, 873904, 331169, 999121, 368576, 309115, 321858, 628503, 164193, 678237, 490371, 578920, 551257, 630412, 693073, 848241, 775968, 130322, 227649, 441490, 407935, 234202, 406728, 352496, 383972, 216653, 96889, 810598, 270732, 486014, 553972, 647551, 267542, 309249, 701432, 125019, 751198, 722677, 434021, 480642, 127336, 577612, 996175, 629163, 419940, 888056, 919034, 773395, 636201, 240236, 159506, 865648, 708394, 105187, 829965, 326569, 263832, 997104, 366270, 499706, 824380, 352048, 982725, 786209, 947036, 372405, 919734, 345231, 140503, 656716, 18384, 135187, 64558, 681864, 128649, 143742, 132656, 868053, 333869, 952629, 584911, 508131, 379498, 960125, 739019, 172005, 841029, 867862, 268741, 973314, 621057, 748694, 697962, 421518, 696261, 418417, 240533],
            yAxisIndex: 2
          },
        ]
      },
      flag: true
    }
    this.lastTimer = null;
    this.timer = null;
    this.requestTime = null
  }

  getHomeDataList = async (active = 'day') => {
    let { token } = this.state
    let url = HOME_DATALIST + `?type=${active}`
    await axios.get(url, {
      headers: {
        "token": token
      }
    }).then(r => {
      if (r.data.code === 1) {
        let counTime = []
        let price = []
        let marketCap = []
        let volh = []
        r.data.result.data.forEach(ele => {
          if (active === 'day') {
            counTime.push(ele.count_time.trim().split(" ")[1])
          } else {
            counTime.push(ele.count_time)
          }
          marketCap.push(ele.market_cap)
          price.push(ele.price_usdt)
          volh.push(ele.vol_24h)
        });
        let priceArr = []  //è£çæ¯ä»·æ ¼ æå¤§åä½çº§å« ç´æ¥ç¨
        price.forEach(ele => {
          priceArr.push(ele)
        })
        let volhArr = []    //è£çæ¯24å°æ¶æäº¤é æå¤§åä½çº§  ç´æ¥ç¨
        volh.forEach(ele => {
          volhArr.push(ele)
        })
        let mystart,
          myend
        if (active !== 'day') {
          mystart = 75,
            myend = 100//xåæ çç¾åæ¯å®¹é
        } else {
          mystart = 95,
            myend = 100//xåæ çç¾åæ¯å®¹é
        }
        this.setState({
          active: active,
          avaPrice: r.data.result.lastPrice,
          percent: r.data.result.percent,
          flag: false,
          option1: {
            grid: {
              left: 0,
              right: 0,
              bottom: 50,
            },
            legend: {
              left: 16
            },
            dataZoom: [{
              type: 'inside',
              start: mystart,
              end: myend,
              zoomLock: false,
            }],
            tooltip: {
              trigger: 'axis',
            //   formatter: function (params) {
            //     var htmlStr = '';
            //     htmlStr += '<div><span style="color:#fff;">' + params[0].name + '</span><br/> ';
            //     for (var i = 0; i < params.length; i++) {
            //         htmlStr += '<span style="width: 8px;height: 8px;display:inline-block;border-radius: 50%;background-color:' + params[i].color + '"></span><span style="color:#fff;">' + params[i].seriesName + ':</span>' +
            //             '<span style="color:#fff;">' + params[i].value + '</span><br/>';
            //     }
            //     htmlStr += '</div>';
            //     return htmlStr;
            // },
            },
            xAxis: { //xè½´
              boundaryGap: false,
              data: counTime,//éè¦å¨ææ¹å
              axisLine: {
                show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
              },
              type: 'category',
              // offset: 9, //åç§»é
              axisTick: {
                show: false, //å»åº¦
                alignWithLabel: true //å»åº¦çº¿åæ ç­¾å¯¹é½
              },
              axisLabel: {
                align: {
                  option: 'right'
                },
                color: 'rgba(141, 144, 153, 1)',
                fontSize: 10,
                lineHeight: 14,
              },
            },
            yAxis: [
              {
                type: 'value',
                boundaryGap: [0, '100%'],
                position: 'left',
                max: function (value) {
                  return value.max + value.max * 0.008
                },
                min: function (value) {
                  return value.min - value.min * 0.005
                },
                axisLine: {
                  show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
                },
                axisTick: {
                  show: false, //å»åº¦
                },
                splitLine: {
                  show: false, //æ¯å¦æ¾ç¤ºåéçº¿
                },
                scale: true,
              },
              {
                type: 'value',
                boundaryGap: [0, '100%'],
                position: 'left',
                max: function (value) {
                  return value.max + value.max * 0.008
                },
                min: function (value) {
                  return value.min - value.min * 0.005
                },
                axisLine: {
                  show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
                },
                axisTick: {
                  show: false, //å»åº¦
                },
                splitLine: {
                  show: false, //æ¯å¦æ¾ç¤ºåéçº¿
                },
                scale: true,
              },
              {
                type: 'value',
                boundaryGap: [0, '100%'],
                position: 'left',
                max: function (value) {
                  return value.max + value.max * 0.008
                },
                min: function (value) {
                  return value.min - value.min * 0.005
                },
                axisLine: {
                  show: false, //æ¯å¦æ¾ç¤ºè½´çº¿
                },
                axisTick: {
                  show: false, //å»åº¦
                },
                splitLine: {
                  show: false, //æ¯å¦æ¾ç¤ºåéçº¿
                },
                scale: true,
              },
            ],
            series: [
              {
                name: 'ä»·æ ¼',
                type: 'line',
                smooth: true,    //åæ»
                symbol: 'none',
                data: priceArr,
                yAxisIndex: 0
              },
              {
                name: 'æ»äº¤æé',
                type: 'line',
                smooth: true,
                symbol: 'none',
                data: marketCap,
                yAxisIndex: 1

              },
              {
                name: 'æäº¤é',
                type: 'line',
                smooth: true,
                symbol: 'none',
                data: volhArr,
                yAxisIndex: 2
              },
            ]
          },
        })
      }
    }).catch(e => console.log('[å¤§æ°æ®è¶å¿å¾Error]', e))

  }
  componentDidMount() {
    // BackHandler.addEventListener('hardwareBackPress', this.onBackAndroid)
    this.getHomeDataList();
    this.requestTime = setInterval(() => {
    this.getHomeDataList();
    }, 120000)

  }
  _dbclick = () => {
    let { active } = this.state
    const clickTime = new Date().getTime();
    if (this.lastclick && (clickTime - this.lastclick < 300)) {
      //ç¬¬äºæ¬¡åä»¥ä¸ç¹å»
      clearTimeout(this.timer);
      //è·³å»æ»¡å±å¾ ä¼ active
      this.context.navigate("SecondEchart", { active: active })
    } else {
      //ç¬¬ä¸æ¬¡ç¹å»
      this.timer = setTimeout(() => {
        return
      }, 300);
    }
    this.lastclick = clickTime;
  }

  componentWillUnmount() {
    clearInterval(this.requestTime)
    // BackHandler.removeEventListener('hardwareBackPress', this.onBackAndroid)
  }

  onBackAndroid = () => {
    // BackHandler.exitApp();
    return;
  }
  render() {
    let { active, option1, avaPrice, percent } = this.state
    return (
      <>
        <PriceShow price={avaPrice} percent={percent}></PriceShow>
        <View style={styles.box} >
          <View style={{ flexDirection: 'row', backgroundColor: '#fff', justifyContent: 'space-around', height: 40, alignItems: 'center' }}>
            <TouchableOpacity style={{ ...styles.boxon }} onPress={() => {
              Toast.message('å è½½ä¸­', 1200, 'top')
              this.getHomeDataList('day')
            }}>
              <Text style={[active === 'day' ? styles.active : styles.fon]}>1å¤©</Text>
              {
                active === 'day' ? <Text style={{ backgroundColor: '#008c', height: 1, marginTop: 2 }}>--</Text> : <></>
              }
            </TouchableOpacity>
            <TouchableOpacity style={styles.boxon} onPress={() => {
              Toast.message('å è½½ä¸­', 1200, 'top')
              this.getHomeDataList('week')
            }}>
              <Text style={[active === 'week' ? styles.active : styles.fon]}>1å¨</Text>
              {
                active === 'week' ? <Text style={{ backgroundColor: '#008c', height: 1, marginTop: 2 }}>--</Text> : <></>
              }
            </TouchableOpacity>
            <TouchableOpacity style={styles.boxon} onPress={() => {
              Toast.message('å è½½ä¸­', 1200, 'top')
              this.getHomeDataList('month')
            }}>
              <Text style={[active === 'month' ? styles.active : styles.fon]}>1æ</Text>
              {
                active === 'month' ? <Text style={{ backgroundColor: '#008c', height: 1, marginTop: 2 }}>--</Text> : <></>
              }
            </TouchableOpacity>
            <TouchableOpacity style={styles.boxon} onPress={() => {
              Toast.message('å è½½ä¸­', 1200, 'top')
              this.getHomeDataList('quarter')
            }}>
              <Text style={[active === 'quarter' ? styles.active : styles.fon]}>å­£åº¦</Text>
              {
                active === 'quarter' ? <Text style={{ backgroundColor: '#008c', height: 1, marginTop: 2 }}>--</Text> : <></>
              }
            </TouchableOpacity>
            <TouchableOpacity style={styles.boxon} onPress={() => {
              Toast.message('å è½½ä¸­', 1200, 'top')
              this.getHomeDataList('half_year')
            }}>
              <Text style={[active === 'half_year' ? styles.active : styles.fon]}>åå¹´</Text>
              {
                active === 'half_year' ? <Text style={{ backgroundColor: '#008c', height: 1, marginTop: 2 }}>--</Text> : <></>
              }
            </TouchableOpacity>
            <TouchableOpacity style={styles.boxon} onPress={() => {
              Toast.message('å è½½ä¸­', 1200, 'top')
              this.getHomeDataList('year')
            }}>
              <Text style={[active === 'year' ? styles.active : styles.fon]}>1å¹´</Text>
              {
                active === 'year' ? <Text style={{ backgroundColor: '#008c', height: 1, marginTop: 2 }}>--</Text> : <></>
              }
            </TouchableOpacity>
          </View>
          <TouchableOpacity
            onPress={this._dbclick}
            style={{ backgroundColor: 'rgba(255,255,255,0)', width: '100%', height: 120, position: 'absolute', top: 60, zIndex: 2 }}></TouchableOpacity>
          <Echarts
            option={option1} height={288} width={'100%'} />
        </View >
      </>
    );
  }
}


const styles = StyleSheet.create({
  box: {
    height: 300,
    backgroundColor: '#fff',
  },
  boxon: {
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    width: 75,

  },
  fon: {
    color: '#8D9099',
    fontSize: 11,
    fontWeight: '400'
  },
  active: {
    color: '#3D72E4',
    fontWeight: '500',
    fontSize: 11,
  }
});